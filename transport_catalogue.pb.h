// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace t_c_srlz {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Coord;
struct CoordDefaultTypeInternal;
extern CoordDefaultTypeInternal _Coord_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopsLenght;
struct StopsLenghtDefaultTypeInternal;
extern StopsLenghtDefaultTypeInternal _StopsLenght_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace t_c_srlz
PROTOBUF_NAMESPACE_OPEN
template<> ::t_c_srlz::Bus* Arena::CreateMaybeMessage<::t_c_srlz::Bus>(Arena*);
template<> ::t_c_srlz::Coord* Arena::CreateMaybeMessage<::t_c_srlz::Coord>(Arena*);
template<> ::t_c_srlz::Stop* Arena::CreateMaybeMessage<::t_c_srlz::Stop>(Arena*);
template<> ::t_c_srlz::StopsLenght* Arena::CreateMaybeMessage<::t_c_srlz::StopsLenght>(Arena*);
template<> ::t_c_srlz::TransportCatalogue* Arena::CreateMaybeMessage<::t_c_srlz::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace t_c_srlz {

// ===================================================================

class Coord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_c_srlz.Coord) */ {
 public:
  inline Coord() : Coord(nullptr) {}
  ~Coord() override;
  explicit PROTOBUF_CONSTEXPR Coord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coord(const Coord& from);
  Coord(Coord&& from) noexcept
    : Coord() {
    *this = ::std::move(from);
  }

  inline Coord& operator=(const Coord& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coord& operator=(Coord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coord& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coord* internal_default_instance() {
    return reinterpret_cast<const Coord*>(
               &_Coord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coord& a, Coord& b) {
    a.Swap(&b);
  }
  inline void Swap(Coord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coord& from) {
    Coord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_c_srlz.Coord";
  }
  protected:
  explicit Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:t_c_srlz.Coord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_c_srlz.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_c_srlz.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .t_c_srlz.Coord coord = 2;
  bool has_coord() const;
  private:
  bool _internal_has_coord() const;
  public:
  void clear_coord();
  const ::t_c_srlz::Coord& coord() const;
  PROTOBUF_NODISCARD ::t_c_srlz::Coord* release_coord();
  ::t_c_srlz::Coord* mutable_coord();
  void set_allocated_coord(::t_c_srlz::Coord* coord);
  private:
  const ::t_c_srlz::Coord& _internal_coord() const;
  ::t_c_srlz::Coord* _internal_mutable_coord();
  public:
  void unsafe_arena_set_allocated_coord(
      ::t_c_srlz::Coord* coord);
  ::t_c_srlz::Coord* unsafe_arena_release_coord();

  // uint64 id = 3;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:t_c_srlz.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::t_c_srlz::Coord* coord_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_c_srlz.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_c_srlz.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListNameStopFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsRoundtripFieldNumber = 3,
  };
  // repeated string list_name_stop = 2;
  int list_name_stop_size() const;
  private:
  int _internal_list_name_stop_size() const;
  public:
  void clear_list_name_stop();
  const std::string& list_name_stop(int index) const;
  std::string* mutable_list_name_stop(int index);
  void set_list_name_stop(int index, const std::string& value);
  void set_list_name_stop(int index, std::string&& value);
  void set_list_name_stop(int index, const char* value);
  void set_list_name_stop(int index, const char* value, size_t size);
  std::string* add_list_name_stop();
  void add_list_name_stop(const std::string& value);
  void add_list_name_stop(std::string&& value);
  void add_list_name_stop(const char* value);
  void add_list_name_stop(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list_name_stop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list_name_stop();
  private:
  const std::string& _internal_list_name_stop(int index) const;
  std::string* _internal_add_list_name_stop();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_roundtrip = 3;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:t_c_srlz.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_name_stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopsLenght final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_c_srlz.StopsLenght) */ {
 public:
  inline StopsLenght() : StopsLenght(nullptr) {}
  ~StopsLenght() override;
  explicit PROTOBUF_CONSTEXPR StopsLenght(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopsLenght(const StopsLenght& from);
  StopsLenght(StopsLenght&& from) noexcept
    : StopsLenght() {
    *this = ::std::move(from);
  }

  inline StopsLenght& operator=(const StopsLenght& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopsLenght& operator=(StopsLenght&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopsLenght& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopsLenght* internal_default_instance() {
    return reinterpret_cast<const StopsLenght*>(
               &_StopsLenght_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopsLenght& a, StopsLenght& b) {
    a.Swap(&b);
  }
  inline void Swap(StopsLenght* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopsLenght* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopsLenght* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopsLenght>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopsLenght& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopsLenght& from) {
    StopsLenght::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsLenght* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_c_srlz.StopsLenght";
  }
  protected:
  explicit StopsLenght(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromStopFieldNumber = 1,
    kToStopFieldNumber = 2,
    kLenghtFieldNumber = 3,
  };
  // string from_stop = 1;
  void clear_from_stop();
  const std::string& from_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_stop();
  PROTOBUF_NODISCARD std::string* release_from_stop();
  void set_allocated_from_stop(std::string* from_stop);
  private:
  const std::string& _internal_from_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_stop(const std::string& value);
  std::string* _internal_mutable_from_stop();
  public:

  // string to_stop = 2;
  void clear_to_stop();
  const std::string& to_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_stop();
  PROTOBUF_NODISCARD std::string* release_to_stop();
  void set_allocated_to_stop(std::string* to_stop);
  private:
  const std::string& _internal_to_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_stop(const std::string& value);
  std::string* _internal_mutable_to_stop();
  public:

  // uint64 lenght = 3;
  void clear_lenght();
  uint64_t lenght() const;
  void set_lenght(uint64_t value);
  private:
  uint64_t _internal_lenght() const;
  void _internal_set_lenght(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:t_c_srlz.StopsLenght)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_stop_;
    uint64_t lenght_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_c_srlz.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_c_srlz.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListStopFieldNumber = 1,
    kListBusFieldNumber = 2,
    kListStopLenghtFieldNumber = 3,
  };
  // repeated .t_c_srlz.Stop list_stop = 1;
  int list_stop_size() const;
  private:
  int _internal_list_stop_size() const;
  public:
  void clear_list_stop();
  ::t_c_srlz::Stop* mutable_list_stop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Stop >*
      mutable_list_stop();
  private:
  const ::t_c_srlz::Stop& _internal_list_stop(int index) const;
  ::t_c_srlz::Stop* _internal_add_list_stop();
  public:
  const ::t_c_srlz::Stop& list_stop(int index) const;
  ::t_c_srlz::Stop* add_list_stop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Stop >&
      list_stop() const;

  // repeated .t_c_srlz.Bus list_bus = 2;
  int list_bus_size() const;
  private:
  int _internal_list_bus_size() const;
  public:
  void clear_list_bus();
  ::t_c_srlz::Bus* mutable_list_bus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Bus >*
      mutable_list_bus();
  private:
  const ::t_c_srlz::Bus& _internal_list_bus(int index) const;
  ::t_c_srlz::Bus* _internal_add_list_bus();
  public:
  const ::t_c_srlz::Bus& list_bus(int index) const;
  ::t_c_srlz::Bus* add_list_bus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Bus >&
      list_bus() const;

  // repeated .t_c_srlz.StopsLenght list_stop_lenght = 3;
  int list_stop_lenght_size() const;
  private:
  int _internal_list_stop_lenght_size() const;
  public:
  void clear_list_stop_lenght();
  ::t_c_srlz::StopsLenght* mutable_list_stop_lenght(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::StopsLenght >*
      mutable_list_stop_lenght();
  private:
  const ::t_c_srlz::StopsLenght& _internal_list_stop_lenght(int index) const;
  ::t_c_srlz::StopsLenght* _internal_add_list_stop_lenght();
  public:
  const ::t_c_srlz::StopsLenght& list_stop_lenght(int index) const;
  ::t_c_srlz::StopsLenght* add_list_stop_lenght();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::StopsLenght >&
      list_stop_lenght() const;

  // @@protoc_insertion_point(class_scope:t_c_srlz.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Stop > list_stop_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Bus > list_bus_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::StopsLenght > list_stop_lenght_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coord

// double latitude = 1;
inline void Coord::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Coord::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Coord::latitude() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Coord.latitude)
  return _internal_latitude();
}
inline void Coord::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Coord::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:t_c_srlz.Coord.latitude)
}

// double longitude = 2;
inline void Coord::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Coord::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Coord::longitude() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Coord.longitude)
  return _internal_longitude();
}
inline void Coord::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Coord::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:t_c_srlz.Coord.longitude)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t_c_srlz.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:t_c_srlz.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:t_c_srlz.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t_c_srlz.Stop.name)
}

// .t_c_srlz.Coord coord = 2;
inline bool Stop::_internal_has_coord() const {
  return this != internal_default_instance() && _impl_.coord_ != nullptr;
}
inline bool Stop::has_coord() const {
  return _internal_has_coord();
}
inline void Stop::clear_coord() {
  if (GetArenaForAllocation() == nullptr && _impl_.coord_ != nullptr) {
    delete _impl_.coord_;
  }
  _impl_.coord_ = nullptr;
}
inline const ::t_c_srlz::Coord& Stop::_internal_coord() const {
  const ::t_c_srlz::Coord* p = _impl_.coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::t_c_srlz::Coord&>(
      ::t_c_srlz::_Coord_default_instance_);
}
inline const ::t_c_srlz::Coord& Stop::coord() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Stop.coord)
  return _internal_coord();
}
inline void Stop::unsafe_arena_set_allocated_coord(
    ::t_c_srlz::Coord* coord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coord_);
  }
  _impl_.coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t_c_srlz.Stop.coord)
}
inline ::t_c_srlz::Coord* Stop::release_coord() {
  
  ::t_c_srlz::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t_c_srlz::Coord* Stop::unsafe_arena_release_coord() {
  // @@protoc_insertion_point(field_release:t_c_srlz.Stop.coord)
  
  ::t_c_srlz::Coord* temp = _impl_.coord_;
  _impl_.coord_ = nullptr;
  return temp;
}
inline ::t_c_srlz::Coord* Stop::_internal_mutable_coord() {
  
  if (_impl_.coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::t_c_srlz::Coord>(GetArenaForAllocation());
    _impl_.coord_ = p;
  }
  return _impl_.coord_;
}
inline ::t_c_srlz::Coord* Stop::mutable_coord() {
  ::t_c_srlz::Coord* _msg = _internal_mutable_coord();
  // @@protoc_insertion_point(field_mutable:t_c_srlz.Stop.coord)
  return _msg;
}
inline void Stop::set_allocated_coord(::t_c_srlz::Coord* coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coord_;
  }
  if (coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coord);
    if (message_arena != submessage_arena) {
      coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coord_ = coord;
  // @@protoc_insertion_point(field_set_allocated:t_c_srlz.Stop.coord)
}

// uint64 id = 3;
inline void Stop::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Stop::id() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:t_c_srlz.Stop.id)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t_c_srlz.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:t_c_srlz.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:t_c_srlz.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t_c_srlz.Bus.name)
}

// repeated string list_name_stop = 2;
inline int Bus::_internal_list_name_stop_size() const {
  return _impl_.list_name_stop_.size();
}
inline int Bus::list_name_stop_size() const {
  return _internal_list_name_stop_size();
}
inline void Bus::clear_list_name_stop() {
  _impl_.list_name_stop_.Clear();
}
inline std::string* Bus::add_list_name_stop() {
  std::string* _s = _internal_add_list_name_stop();
  // @@protoc_insertion_point(field_add_mutable:t_c_srlz.Bus.list_name_stop)
  return _s;
}
inline const std::string& Bus::_internal_list_name_stop(int index) const {
  return _impl_.list_name_stop_.Get(index);
}
inline const std::string& Bus::list_name_stop(int index) const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Bus.list_name_stop)
  return _internal_list_name_stop(index);
}
inline std::string* Bus::mutable_list_name_stop(int index) {
  // @@protoc_insertion_point(field_mutable:t_c_srlz.Bus.list_name_stop)
  return _impl_.list_name_stop_.Mutable(index);
}
inline void Bus::set_list_name_stop(int index, const std::string& value) {
  _impl_.list_name_stop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:t_c_srlz.Bus.list_name_stop)
}
inline void Bus::set_list_name_stop(int index, std::string&& value) {
  _impl_.list_name_stop_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:t_c_srlz.Bus.list_name_stop)
}
inline void Bus::set_list_name_stop(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.list_name_stop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:t_c_srlz.Bus.list_name_stop)
}
inline void Bus::set_list_name_stop(int index, const char* value, size_t size) {
  _impl_.list_name_stop_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:t_c_srlz.Bus.list_name_stop)
}
inline std::string* Bus::_internal_add_list_name_stop() {
  return _impl_.list_name_stop_.Add();
}
inline void Bus::add_list_name_stop(const std::string& value) {
  _impl_.list_name_stop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:t_c_srlz.Bus.list_name_stop)
}
inline void Bus::add_list_name_stop(std::string&& value) {
  _impl_.list_name_stop_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:t_c_srlz.Bus.list_name_stop)
}
inline void Bus::add_list_name_stop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.list_name_stop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:t_c_srlz.Bus.list_name_stop)
}
inline void Bus::add_list_name_stop(const char* value, size_t size) {
  _impl_.list_name_stop_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:t_c_srlz.Bus.list_name_stop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::list_name_stop() const {
  // @@protoc_insertion_point(field_list:t_c_srlz.Bus.list_name_stop)
  return _impl_.list_name_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_list_name_stop() {
  // @@protoc_insertion_point(field_mutable_list:t_c_srlz.Bus.list_name_stop)
  return &_impl_.list_name_stop_;
}

// bool is_roundtrip = 3;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:t_c_srlz.Bus.is_roundtrip)
}

// -------------------------------------------------------------------

// StopsLenght

// string from_stop = 1;
inline void StopsLenght::clear_from_stop() {
  _impl_.from_stop_.ClearToEmpty();
}
inline const std::string& StopsLenght::from_stop() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.StopsLenght.from_stop)
  return _internal_from_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopsLenght::set_from_stop(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_stop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t_c_srlz.StopsLenght.from_stop)
}
inline std::string* StopsLenght::mutable_from_stop() {
  std::string* _s = _internal_mutable_from_stop();
  // @@protoc_insertion_point(field_mutable:t_c_srlz.StopsLenght.from_stop)
  return _s;
}
inline const std::string& StopsLenght::_internal_from_stop() const {
  return _impl_.from_stop_.Get();
}
inline void StopsLenght::_internal_set_from_stop(const std::string& value) {
  
  _impl_.from_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* StopsLenght::_internal_mutable_from_stop() {
  
  return _impl_.from_stop_.Mutable(GetArenaForAllocation());
}
inline std::string* StopsLenght::release_from_stop() {
  // @@protoc_insertion_point(field_release:t_c_srlz.StopsLenght.from_stop)
  return _impl_.from_stop_.Release();
}
inline void StopsLenght::set_allocated_from_stop(std::string* from_stop) {
  if (from_stop != nullptr) {
    
  } else {
    
  }
  _impl_.from_stop_.SetAllocated(from_stop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_stop_.IsDefault()) {
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t_c_srlz.StopsLenght.from_stop)
}

// string to_stop = 2;
inline void StopsLenght::clear_to_stop() {
  _impl_.to_stop_.ClearToEmpty();
}
inline const std::string& StopsLenght::to_stop() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.StopsLenght.to_stop)
  return _internal_to_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopsLenght::set_to_stop(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_stop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t_c_srlz.StopsLenght.to_stop)
}
inline std::string* StopsLenght::mutable_to_stop() {
  std::string* _s = _internal_mutable_to_stop();
  // @@protoc_insertion_point(field_mutable:t_c_srlz.StopsLenght.to_stop)
  return _s;
}
inline const std::string& StopsLenght::_internal_to_stop() const {
  return _impl_.to_stop_.Get();
}
inline void StopsLenght::_internal_set_to_stop(const std::string& value) {
  
  _impl_.to_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* StopsLenght::_internal_mutable_to_stop() {
  
  return _impl_.to_stop_.Mutable(GetArenaForAllocation());
}
inline std::string* StopsLenght::release_to_stop() {
  // @@protoc_insertion_point(field_release:t_c_srlz.StopsLenght.to_stop)
  return _impl_.to_stop_.Release();
}
inline void StopsLenght::set_allocated_to_stop(std::string* to_stop) {
  if (to_stop != nullptr) {
    
  } else {
    
  }
  _impl_.to_stop_.SetAllocated(to_stop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_stop_.IsDefault()) {
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t_c_srlz.StopsLenght.to_stop)
}

// uint64 lenght = 3;
inline void StopsLenght::clear_lenght() {
  _impl_.lenght_ = uint64_t{0u};
}
inline uint64_t StopsLenght::_internal_lenght() const {
  return _impl_.lenght_;
}
inline uint64_t StopsLenght::lenght() const {
  // @@protoc_insertion_point(field_get:t_c_srlz.StopsLenght.lenght)
  return _internal_lenght();
}
inline void StopsLenght::_internal_set_lenght(uint64_t value) {
  
  _impl_.lenght_ = value;
}
inline void StopsLenght::set_lenght(uint64_t value) {
  _internal_set_lenght(value);
  // @@protoc_insertion_point(field_set:t_c_srlz.StopsLenght.lenght)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .t_c_srlz.Stop list_stop = 1;
inline int TransportCatalogue::_internal_list_stop_size() const {
  return _impl_.list_stop_.size();
}
inline int TransportCatalogue::list_stop_size() const {
  return _internal_list_stop_size();
}
inline void TransportCatalogue::clear_list_stop() {
  _impl_.list_stop_.Clear();
}
inline ::t_c_srlz::Stop* TransportCatalogue::mutable_list_stop(int index) {
  // @@protoc_insertion_point(field_mutable:t_c_srlz.TransportCatalogue.list_stop)
  return _impl_.list_stop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Stop >*
TransportCatalogue::mutable_list_stop() {
  // @@protoc_insertion_point(field_mutable_list:t_c_srlz.TransportCatalogue.list_stop)
  return &_impl_.list_stop_;
}
inline const ::t_c_srlz::Stop& TransportCatalogue::_internal_list_stop(int index) const {
  return _impl_.list_stop_.Get(index);
}
inline const ::t_c_srlz::Stop& TransportCatalogue::list_stop(int index) const {
  // @@protoc_insertion_point(field_get:t_c_srlz.TransportCatalogue.list_stop)
  return _internal_list_stop(index);
}
inline ::t_c_srlz::Stop* TransportCatalogue::_internal_add_list_stop() {
  return _impl_.list_stop_.Add();
}
inline ::t_c_srlz::Stop* TransportCatalogue::add_list_stop() {
  ::t_c_srlz::Stop* _add = _internal_add_list_stop();
  // @@protoc_insertion_point(field_add:t_c_srlz.TransportCatalogue.list_stop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Stop >&
TransportCatalogue::list_stop() const {
  // @@protoc_insertion_point(field_list:t_c_srlz.TransportCatalogue.list_stop)
  return _impl_.list_stop_;
}

// repeated .t_c_srlz.Bus list_bus = 2;
inline int TransportCatalogue::_internal_list_bus_size() const {
  return _impl_.list_bus_.size();
}
inline int TransportCatalogue::list_bus_size() const {
  return _internal_list_bus_size();
}
inline void TransportCatalogue::clear_list_bus() {
  _impl_.list_bus_.Clear();
}
inline ::t_c_srlz::Bus* TransportCatalogue::mutable_list_bus(int index) {
  // @@protoc_insertion_point(field_mutable:t_c_srlz.TransportCatalogue.list_bus)
  return _impl_.list_bus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Bus >*
TransportCatalogue::mutable_list_bus() {
  // @@protoc_insertion_point(field_mutable_list:t_c_srlz.TransportCatalogue.list_bus)
  return &_impl_.list_bus_;
}
inline const ::t_c_srlz::Bus& TransportCatalogue::_internal_list_bus(int index) const {
  return _impl_.list_bus_.Get(index);
}
inline const ::t_c_srlz::Bus& TransportCatalogue::list_bus(int index) const {
  // @@protoc_insertion_point(field_get:t_c_srlz.TransportCatalogue.list_bus)
  return _internal_list_bus(index);
}
inline ::t_c_srlz::Bus* TransportCatalogue::_internal_add_list_bus() {
  return _impl_.list_bus_.Add();
}
inline ::t_c_srlz::Bus* TransportCatalogue::add_list_bus() {
  ::t_c_srlz::Bus* _add = _internal_add_list_bus();
  // @@protoc_insertion_point(field_add:t_c_srlz.TransportCatalogue.list_bus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::Bus >&
TransportCatalogue::list_bus() const {
  // @@protoc_insertion_point(field_list:t_c_srlz.TransportCatalogue.list_bus)
  return _impl_.list_bus_;
}

// repeated .t_c_srlz.StopsLenght list_stop_lenght = 3;
inline int TransportCatalogue::_internal_list_stop_lenght_size() const {
  return _impl_.list_stop_lenght_.size();
}
inline int TransportCatalogue::list_stop_lenght_size() const {
  return _internal_list_stop_lenght_size();
}
inline void TransportCatalogue::clear_list_stop_lenght() {
  _impl_.list_stop_lenght_.Clear();
}
inline ::t_c_srlz::StopsLenght* TransportCatalogue::mutable_list_stop_lenght(int index) {
  // @@protoc_insertion_point(field_mutable:t_c_srlz.TransportCatalogue.list_stop_lenght)
  return _impl_.list_stop_lenght_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::StopsLenght >*
TransportCatalogue::mutable_list_stop_lenght() {
  // @@protoc_insertion_point(field_mutable_list:t_c_srlz.TransportCatalogue.list_stop_lenght)
  return &_impl_.list_stop_lenght_;
}
inline const ::t_c_srlz::StopsLenght& TransportCatalogue::_internal_list_stop_lenght(int index) const {
  return _impl_.list_stop_lenght_.Get(index);
}
inline const ::t_c_srlz::StopsLenght& TransportCatalogue::list_stop_lenght(int index) const {
  // @@protoc_insertion_point(field_get:t_c_srlz.TransportCatalogue.list_stop_lenght)
  return _internal_list_stop_lenght(index);
}
inline ::t_c_srlz::StopsLenght* TransportCatalogue::_internal_add_list_stop_lenght() {
  return _impl_.list_stop_lenght_.Add();
}
inline ::t_c_srlz::StopsLenght* TransportCatalogue::add_list_stop_lenght() {
  ::t_c_srlz::StopsLenght* _add = _internal_add_list_stop_lenght();
  // @@protoc_insertion_point(field_add:t_c_srlz.TransportCatalogue.list_stop_lenght)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_c_srlz::StopsLenght >&
TransportCatalogue::list_stop_lenght() const {
  // @@protoc_insertion_point(field_list:t_c_srlz.TransportCatalogue.list_stop_lenght)
  return _impl_.list_stop_lenght_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace t_c_srlz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

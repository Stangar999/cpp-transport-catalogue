// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace t_r_srlz {
class EdgeAditionInfo;
struct EdgeAditionInfoDefaultTypeInternal;
extern EdgeAditionInfoDefaultTypeInternal _EdgeAditionInfo_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace t_r_srlz
PROTOBUF_NAMESPACE_OPEN
template<> ::t_r_srlz::EdgeAditionInfo* Arena::CreateMaybeMessage<::t_r_srlz::EdgeAditionInfo>(Arena*);
template<> ::t_r_srlz::RoutingSettings* Arena::CreateMaybeMessage<::t_r_srlz::RoutingSettings>(Arena*);
template<> ::t_r_srlz::TransportRouter* Arena::CreateMaybeMessage<::t_r_srlz::TransportRouter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace t_r_srlz {

// ===================================================================

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_r_srlz.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_r_srlz.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeMinutFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // int32 bus_wait_time_minut = 1;
  void clear_bus_wait_time_minut();
  int32_t bus_wait_time_minut() const;
  void set_bus_wait_time_minut(int32_t value);
  private:
  int32_t _internal_bus_wait_time_minut() const;
  void _internal_set_bus_wait_time_minut(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:t_r_srlz.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_velocity_;
    int32_t bus_wait_time_minut_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeAditionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_r_srlz.EdgeAditionInfo) */ {
 public:
  inline EdgeAditionInfo() : EdgeAditionInfo(nullptr) {}
  ~EdgeAditionInfo() override;
  explicit PROTOBUF_CONSTEXPR EdgeAditionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeAditionInfo(const EdgeAditionInfo& from);
  EdgeAditionInfo(EdgeAditionInfo&& from) noexcept
    : EdgeAditionInfo() {
    *this = ::std::move(from);
  }

  inline EdgeAditionInfo& operator=(const EdgeAditionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeAditionInfo& operator=(EdgeAditionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeAditionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeAditionInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeAditionInfo*>(
               &_EdgeAditionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EdgeAditionInfo& a, EdgeAditionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeAditionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeAditionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeAditionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeAditionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeAditionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeAditionInfo& from) {
    EdgeAditionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeAditionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_r_srlz.EdgeAditionInfo";
  }
  protected:
  explicit EdgeAditionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kCountSpansFieldNumber = 2,
  };
  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // uint64 count_spans = 2;
  void clear_count_spans();
  uint64_t count_spans() const;
  void set_count_spans(uint64_t value);
  private:
  uint64_t _internal_count_spans() const;
  void _internal_set_count_spans(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:t_r_srlz.EdgeAditionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
    uint64_t count_spans_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t_r_srlz.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit PROTOBUF_CONSTEXPR TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportRouter& from) {
    TransportRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "t_r_srlz.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesBusesFieldNumber = 2,
    kIdStopesFieldNumber = 3,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 4,
  };
  // repeated .t_r_srlz.EdgeAditionInfo edges_buses = 2;
  int edges_buses_size() const;
  private:
  int _internal_edges_buses_size() const;
  public:
  void clear_edges_buses();
  ::t_r_srlz::EdgeAditionInfo* mutable_edges_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_r_srlz::EdgeAditionInfo >*
      mutable_edges_buses();
  private:
  const ::t_r_srlz::EdgeAditionInfo& _internal_edges_buses(int index) const;
  ::t_r_srlz::EdgeAditionInfo* _internal_add_edges_buses();
  public:
  const ::t_r_srlz::EdgeAditionInfo& edges_buses(int index) const;
  ::t_r_srlz::EdgeAditionInfo* add_edges_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_r_srlz::EdgeAditionInfo >&
      edges_buses() const;

  // repeated string id_stopes = 3;
  int id_stopes_size() const;
  private:
  int _internal_id_stopes_size() const;
  public:
  void clear_id_stopes();
  const std::string& id_stopes(int index) const;
  std::string* mutable_id_stopes(int index);
  void set_id_stopes(int index, const std::string& value);
  void set_id_stopes(int index, std::string&& value);
  void set_id_stopes(int index, const char* value);
  void set_id_stopes(int index, const char* value, size_t size);
  std::string* add_id_stopes();
  void add_id_stopes(const std::string& value);
  void add_id_stopes(std::string&& value);
  void add_id_stopes(const char* value);
  void add_id_stopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& id_stopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_id_stopes();
  private:
  const std::string& _internal_id_stopes(int index) const;
  std::string* _internal_add_id_stopes();
  public:

  // .t_r_srlz.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::t_r_srlz::RoutingSettings& routing_settings() const;
  PROTOBUF_NODISCARD ::t_r_srlz::RoutingSettings* release_routing_settings();
  ::t_r_srlz::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::t_r_srlz::RoutingSettings* routing_settings);
  private:
  const ::t_r_srlz::RoutingSettings& _internal_routing_settings() const;
  ::t_r_srlz::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::t_r_srlz::RoutingSettings* routing_settings);
  ::t_r_srlz::RoutingSettings* unsafe_arena_release_routing_settings();

  // .t_r_srlz.Graph graph = 4;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::t_r_srlz::Graph& graph() const;
  PROTOBUF_NODISCARD ::t_r_srlz::Graph* release_graph();
  ::t_r_srlz::Graph* mutable_graph();
  void set_allocated_graph(::t_r_srlz::Graph* graph);
  private:
  const ::t_r_srlz::Graph& _internal_graph() const;
  ::t_r_srlz::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::t_r_srlz::Graph* graph);
  ::t_r_srlz::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:t_r_srlz.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_r_srlz::EdgeAditionInfo > edges_buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> id_stopes_;
    ::t_r_srlz::RoutingSettings* routing_settings_;
    ::t_r_srlz::Graph* graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// int32 bus_wait_time_minut = 1;
inline void RoutingSettings::clear_bus_wait_time_minut() {
  _impl_.bus_wait_time_minut_ = 0;
}
inline int32_t RoutingSettings::_internal_bus_wait_time_minut() const {
  return _impl_.bus_wait_time_minut_;
}
inline int32_t RoutingSettings::bus_wait_time_minut() const {
  // @@protoc_insertion_point(field_get:t_r_srlz.RoutingSettings.bus_wait_time_minut)
  return _internal_bus_wait_time_minut();
}
inline void RoutingSettings::_internal_set_bus_wait_time_minut(int32_t value) {
  
  _impl_.bus_wait_time_minut_ = value;
}
inline void RoutingSettings::set_bus_wait_time_minut(int32_t value) {
  _internal_set_bus_wait_time_minut(value);
  // @@protoc_insertion_point(field_set:t_r_srlz.RoutingSettings.bus_wait_time_minut)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:t_r_srlz.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:t_r_srlz.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// EdgeAditionInfo

// string bus_name = 1;
inline void EdgeAditionInfo::clear_bus_name() {
  _impl_.bus_name_.ClearToEmpty();
}
inline const std::string& EdgeAditionInfo::bus_name() const {
  // @@protoc_insertion_point(field_get:t_r_srlz.EdgeAditionInfo.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdgeAditionInfo::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t_r_srlz.EdgeAditionInfo.bus_name)
}
inline std::string* EdgeAditionInfo::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:t_r_srlz.EdgeAditionInfo.bus_name)
  return _s;
}
inline const std::string& EdgeAditionInfo::_internal_bus_name() const {
  return _impl_.bus_name_.Get();
}
inline void EdgeAditionInfo::_internal_set_bus_name(const std::string& value) {
  
  _impl_.bus_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeAditionInfo::_internal_mutable_bus_name() {
  
  return _impl_.bus_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdgeAditionInfo::release_bus_name() {
  // @@protoc_insertion_point(field_release:t_r_srlz.EdgeAditionInfo.bus_name)
  return _impl_.bus_name_.Release();
}
inline void EdgeAditionInfo::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  _impl_.bus_name_.SetAllocated(bus_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_name_.IsDefault()) {
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t_r_srlz.EdgeAditionInfo.bus_name)
}

// uint64 count_spans = 2;
inline void EdgeAditionInfo::clear_count_spans() {
  _impl_.count_spans_ = uint64_t{0u};
}
inline uint64_t EdgeAditionInfo::_internal_count_spans() const {
  return _impl_.count_spans_;
}
inline uint64_t EdgeAditionInfo::count_spans() const {
  // @@protoc_insertion_point(field_get:t_r_srlz.EdgeAditionInfo.count_spans)
  return _internal_count_spans();
}
inline void EdgeAditionInfo::_internal_set_count_spans(uint64_t value) {
  
  _impl_.count_spans_ = value;
}
inline void EdgeAditionInfo::set_count_spans(uint64_t value) {
  _internal_set_count_spans(value);
  // @@protoc_insertion_point(field_set:t_r_srlz.EdgeAditionInfo.count_spans)
}

// -------------------------------------------------------------------

// TransportRouter

// .t_r_srlz.RoutingSettings routing_settings = 1;
inline bool TransportRouter::_internal_has_routing_settings() const {
  return this != internal_default_instance() && _impl_.routing_settings_ != nullptr;
}
inline bool TransportRouter::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void TransportRouter::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
}
inline const ::t_r_srlz::RoutingSettings& TransportRouter::_internal_routing_settings() const {
  const ::t_r_srlz::RoutingSettings* p = _impl_.routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::t_r_srlz::RoutingSettings&>(
      ::t_r_srlz::_RoutingSettings_default_instance_);
}
inline const ::t_r_srlz::RoutingSettings& TransportRouter::routing_settings() const {
  // @@protoc_insertion_point(field_get:t_r_srlz.TransportRouter.routing_settings)
  return _internal_routing_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routing_settings(
    ::t_r_srlz::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_settings_);
  }
  _impl_.routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t_r_srlz.TransportRouter.routing_settings)
}
inline ::t_r_srlz::RoutingSettings* TransportRouter::release_routing_settings() {
  
  ::t_r_srlz::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t_r_srlz::RoutingSettings* TransportRouter::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:t_r_srlz.TransportRouter.routing_settings)
  
  ::t_r_srlz::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
  return temp;
}
inline ::t_r_srlz::RoutingSettings* TransportRouter::_internal_mutable_routing_settings() {
  
  if (_impl_.routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::t_r_srlz::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_settings_ = p;
  }
  return _impl_.routing_settings_;
}
inline ::t_r_srlz::RoutingSettings* TransportRouter::mutable_routing_settings() {
  ::t_r_srlz::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:t_r_srlz.TransportRouter.routing_settings)
  return _msg;
}
inline void TransportRouter::set_allocated_routing_settings(::t_r_srlz::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:t_r_srlz.TransportRouter.routing_settings)
}

// repeated .t_r_srlz.EdgeAditionInfo edges_buses = 2;
inline int TransportRouter::_internal_edges_buses_size() const {
  return _impl_.edges_buses_.size();
}
inline int TransportRouter::edges_buses_size() const {
  return _internal_edges_buses_size();
}
inline void TransportRouter::clear_edges_buses() {
  _impl_.edges_buses_.Clear();
}
inline ::t_r_srlz::EdgeAditionInfo* TransportRouter::mutable_edges_buses(int index) {
  // @@protoc_insertion_point(field_mutable:t_r_srlz.TransportRouter.edges_buses)
  return _impl_.edges_buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_r_srlz::EdgeAditionInfo >*
TransportRouter::mutable_edges_buses() {
  // @@protoc_insertion_point(field_mutable_list:t_r_srlz.TransportRouter.edges_buses)
  return &_impl_.edges_buses_;
}
inline const ::t_r_srlz::EdgeAditionInfo& TransportRouter::_internal_edges_buses(int index) const {
  return _impl_.edges_buses_.Get(index);
}
inline const ::t_r_srlz::EdgeAditionInfo& TransportRouter::edges_buses(int index) const {
  // @@protoc_insertion_point(field_get:t_r_srlz.TransportRouter.edges_buses)
  return _internal_edges_buses(index);
}
inline ::t_r_srlz::EdgeAditionInfo* TransportRouter::_internal_add_edges_buses() {
  return _impl_.edges_buses_.Add();
}
inline ::t_r_srlz::EdgeAditionInfo* TransportRouter::add_edges_buses() {
  ::t_r_srlz::EdgeAditionInfo* _add = _internal_add_edges_buses();
  // @@protoc_insertion_point(field_add:t_r_srlz.TransportRouter.edges_buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t_r_srlz::EdgeAditionInfo >&
TransportRouter::edges_buses() const {
  // @@protoc_insertion_point(field_list:t_r_srlz.TransportRouter.edges_buses)
  return _impl_.edges_buses_;
}

// repeated string id_stopes = 3;
inline int TransportRouter::_internal_id_stopes_size() const {
  return _impl_.id_stopes_.size();
}
inline int TransportRouter::id_stopes_size() const {
  return _internal_id_stopes_size();
}
inline void TransportRouter::clear_id_stopes() {
  _impl_.id_stopes_.Clear();
}
inline std::string* TransportRouter::add_id_stopes() {
  std::string* _s = _internal_add_id_stopes();
  // @@protoc_insertion_point(field_add_mutable:t_r_srlz.TransportRouter.id_stopes)
  return _s;
}
inline const std::string& TransportRouter::_internal_id_stopes(int index) const {
  return _impl_.id_stopes_.Get(index);
}
inline const std::string& TransportRouter::id_stopes(int index) const {
  // @@protoc_insertion_point(field_get:t_r_srlz.TransportRouter.id_stopes)
  return _internal_id_stopes(index);
}
inline std::string* TransportRouter::mutable_id_stopes(int index) {
  // @@protoc_insertion_point(field_mutable:t_r_srlz.TransportRouter.id_stopes)
  return _impl_.id_stopes_.Mutable(index);
}
inline void TransportRouter::set_id_stopes(int index, const std::string& value) {
  _impl_.id_stopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:t_r_srlz.TransportRouter.id_stopes)
}
inline void TransportRouter::set_id_stopes(int index, std::string&& value) {
  _impl_.id_stopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:t_r_srlz.TransportRouter.id_stopes)
}
inline void TransportRouter::set_id_stopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.id_stopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:t_r_srlz.TransportRouter.id_stopes)
}
inline void TransportRouter::set_id_stopes(int index, const char* value, size_t size) {
  _impl_.id_stopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:t_r_srlz.TransportRouter.id_stopes)
}
inline std::string* TransportRouter::_internal_add_id_stopes() {
  return _impl_.id_stopes_.Add();
}
inline void TransportRouter::add_id_stopes(const std::string& value) {
  _impl_.id_stopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:t_r_srlz.TransportRouter.id_stopes)
}
inline void TransportRouter::add_id_stopes(std::string&& value) {
  _impl_.id_stopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:t_r_srlz.TransportRouter.id_stopes)
}
inline void TransportRouter::add_id_stopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.id_stopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:t_r_srlz.TransportRouter.id_stopes)
}
inline void TransportRouter::add_id_stopes(const char* value, size_t size) {
  _impl_.id_stopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:t_r_srlz.TransportRouter.id_stopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransportRouter::id_stopes() const {
  // @@protoc_insertion_point(field_list:t_r_srlz.TransportRouter.id_stopes)
  return _impl_.id_stopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransportRouter::mutable_id_stopes() {
  // @@protoc_insertion_point(field_mutable_list:t_r_srlz.TransportRouter.id_stopes)
  return &_impl_.id_stopes_;
}

// .t_r_srlz.Graph graph = 4;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::t_r_srlz::Graph& TransportRouter::_internal_graph() const {
  const ::t_r_srlz::Graph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::t_r_srlz::Graph&>(
      ::t_r_srlz::_Graph_default_instance_);
}
inline const ::t_r_srlz::Graph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:t_r_srlz.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::t_r_srlz::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t_r_srlz.TransportRouter.graph)
}
inline ::t_r_srlz::Graph* TransportRouter::release_graph() {
  
  ::t_r_srlz::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t_r_srlz::Graph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:t_r_srlz.TransportRouter.graph)
  
  ::t_r_srlz::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::t_r_srlz::Graph* TransportRouter::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::t_r_srlz::Graph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::t_r_srlz::Graph* TransportRouter::mutable_graph() {
  ::t_r_srlz::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:t_r_srlz.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::t_r_srlz::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:t_r_srlz.TransportRouter.graph)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace t_r_srlz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
